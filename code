import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB

# Load Dataset
@st.cache_data
def load_data():
    url = "https://raw.githubusercontent.com/plotly/datasets/master/heart.csv"
    return pd.read_csv(url)

df = load_data()

st.set_page_config(page_title="Heart Disease Predictor", layout="wide")
st.title("‚ù§Ô∏è Heart Disease Prediction App")

# Sidebar Input for Patient Data
st.sidebar.header("ü©∫ Enter Patient Details")
def user_input_features():
    age = st.sidebar.slider('Age', 29, 77, 50)
    sex = st.sidebar.radio('Sex', [0, 1])  # 0 = Female, 1 = Male
    cp = st.sidebar.slider('Chest Pain Type (0-3)', 0, 3, 1)
    trestbps = st.sidebar.slider('Resting Blood Pressure', 90, 200, 120)
    chol = st.sidebar.slider('Cholesterol', 100, 600, 240)
    fbs = st.sidebar.radio('Fasting Blood Sugar > 120 mg/dl', [0, 1])
    restecg = st.sidebar.slider('Rest ECG (0-2)', 0, 2, 1)
    thalach = st.sidebar.slider('Max Heart Rate Achieved', 70, 210, 150)
    exang = st.sidebar.radio('Exercise-Induced Angina', [0, 1])
    oldpeak = st.sidebar.slider('Oldpeak (ST depression)', 0.0, 6.0, 1.0)
    slope = st.sidebar.slider('Slope of ST Segment (0-2)', 0, 2, 1)
    ca = st.sidebar.slider('Major Vessels (0-4)', 0, 4, 0)
    thal = st.sidebar.slider('Thalassemia (1 = normal; 2 = fixed defect; 3 = reversable)', 1, 3, 2)
    data = {
        'age': age, 'sex': sex, 'cp': cp, 'trestbps': trestbps, 'chol': chol,
        'fbs': fbs, 'restecg': restecg, 'thalach': thalach, 'exang': exang,
        'oldpeak': oldpeak, 'slope': slope, 'ca': ca, 'thal': thal
    }
    return pd.DataFrame([data])

user_data = user_input_features()

# Train-Test Split
X = df.drop('target', axis=1)
y = df['target']
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Models
models = {
    "Logistic Regression": LogisticRegression(),
    "Random Forest": RandomForestClassifier(n_estimators=100),
    "SVM": SVC(probability=True),
    "Naive Bayes": GaussianNB(),
    "Gradient Boosting": GradientBoostingClassifier()
}

# Training and Predictions
results = {}
for name, model in models.items():
    model.fit(X_train, y_train)
    preds = model.predict(X_test)
    acc = accuracy_score(y_test, preds)
    results[name] = {
        'accuracy': acc,
        'prediction': model.predict(scaler.transform(user_data))[0],
        'probability': model.predict_proba(scaler.transform(user_data))[0][1]
    }

# Output Accuracy Comparison
st.subheader("üìä Model Accuracy Comparison")
acc_df = pd.DataFrame({
    "Model": list(results.keys()),
    "Accuracy": [round(v['accuracy']*100, 2) for v in results.values()]
})
st.dataframe(acc_df)

# Bar Chart of Accuracies
fig, ax = plt.subplots()
ax.barh(acc_df['Model'], acc_df['Accuracy'], color='teal')
ax.set_xlabel("Accuracy (%)")
ax.set_title("Model Accuracy")
st.pyplot(fig)

# Prediction for User Input
st.subheader("üßæ Prediction on Input Patient Data")
for name, res in results.items():
    diagnosis = "Heart Disease" if res['prediction'] == 1 else "No Heart Disease"
    st.markdown(f"**{name}** predicts: `{diagnosis}` with probability: `{res['probability']:.2f}`")

# Show patient input
with st.expander("üîç See Patient Input Data"):
    st.write(user_data)
